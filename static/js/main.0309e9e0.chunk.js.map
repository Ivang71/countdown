{"version":3,"sources":["components/SideMenu.js","App.js","reportWebVitals.js","index.js"],"names":["SideMenu","props","title","placement","closable","onClose","hideMenu","visible","className","href","target","App","useState","count","setCount","isLoading","duration","Math","random","loading","setLoading","Countdown","Statistic","deadline","Date","now","setVisible","onClick","type","icon","SettingOutlined","id","size","setTimeout","value","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAGe,SAASA,EAASC,GAC7B,OACI,eAAC,IAAD,CACIC,MAAM,UACNC,UAAU,QACVC,UAAU,EACVC,QAASJ,EAAMK,SACfC,QAASN,EAAMM,QALnB,UAOI,kCACI,mFAEJ,yBAAQC,UAAU,iBAAlB,kBAAwC,mBAAGC,KAAK,yCACLC,OAAO,SADV,+BCLrC,SAASC,EAAIV,GAAQ,IAAD,EAELW,mBAAS,GAFJ,mBAExBC,EAFwB,KAEjBC,EAFiB,OAKDF,mBAAS,CACnCG,WAAW,EACXC,SAA0B,IAAhBC,KAAKC,SAAkB,MAPN,mBAKxBC,EALwB,KAKfC,EALe,KAoBxBC,EAAaC,IAAbD,UACDE,EAAWC,KAAKC,MAAQN,EAAQH,SArBP,EAuBDJ,oBAAS,GAvBR,mBAuBxBL,EAvBwB,KAuBfmB,EAvBe,KA4B/B,OACI,sBAAKlB,UAAWK,EAAQ,EAAI,MAAQ,wBAApC,UACI,cAAC,IAAD,CAAQc,QANG,kBAAMD,GAAW,IAMClB,UAAU,WAAWoB,KAAK,OAAOC,KAAM,cAACC,EAAA,EAAD,IAAoBC,GAAG,eACnFC,KAAK,UACb,cAAChC,EAAD,CAAUO,QAASA,EAASD,SAPjB,kBAAMoB,GAAW,MAS5B,6CAAgBb,EAAhB,YAEA,cAAC,IAAD,CACIc,QAAS,WA3BjBP,EAAW,2BAAID,GAAL,IAAcJ,WAAW,KACnCkB,YACI,kBAAMb,EAAW,CACbJ,SAAkC,MAAvBC,KAAKC,SAAW,IAAcL,EAAQ,KACjDE,WAAW,MAEfI,EAAQH,UAuBAF,EAASD,EAAQ,IAErBe,KAAK,UACLT,QAASA,EAAQJ,UANrB,sBASCI,EAAQJ,UAAY,cAACM,EAAD,CAAWa,MAAOX,EAAUY,OAAO,UAAY,QCvDhF,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACQ,cAAC,EAAD,MAERC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.0309e9e0.chunk.js","sourcesContent":["import React from 'react'\nimport {Drawer} from \"antd\";\n\nexport default function SideMenu(props) {\n    return (\n        <Drawer\n            title=\"Clicker\"\n            placement=\"right\"\n            closable={true}\n            onClose={props.hideMenu}\n            visible={props.visible}\n        >\n            <section>\n                <p>The content will be added soon. Come back later!</p>\n            </section>\n            <footer className=\"sideMenuFooter\">View <a href=\"https://github.com/Ivang316/playground\"\n                                                       target=\"_blank\">source code</a></footer>\n        </Drawer>\n    )\n}","import './App.css';\nimport 'antd/dist/antd.dark.css';\nimport React, {useState} from \"react\";\nimport {Button, Drawer, Statistic} from \"antd\";\nimport {SettingOutlined} from '@ant-design/icons';\nimport SideMenu from \"./components/SideMenu\";\n\n//TODO: make loader\n//TODO: make drawer with language switch\n//https://jsonplaceholder.typicode.com/ fake rest api\nexport default function App(props) {\n\n    const [count, setCount] = useState(0);\n\n\n    const [loading, setLoading] = useState({\n        isLoading: false,\n        duration: Math.random() * 1000 + 1000,\n    });\n    const enterLoading = () => {\n        setLoading({...loading, isLoading: true})\n        setTimeout(\n            () => setLoading({\n                duration: (Math.random() + 0.2) * 1300 * count + 1500,\n                isLoading: false\n            }),\n            loading.duration\n        )\n    }\n\n    const {Countdown} = Statistic;\n    const deadline = Date.now() + loading.duration; // Moment is also OK\n\n    const [visible, setVisible] = useState(false);\n    const showDrawer = () => setVisible(true)\n    const hideDrawer = () => setVisible(false)\n\n\n    return (\n        <div className={count < 2 ? \"App\" : \"App alteredBackground\"}>\n            <Button onClick={showDrawer} className=\"sideMenu\" type=\"text\" icon={<SettingOutlined/>} id=\"drawerButton\"\n                    size=\"large\"/>\n            <SideMenu visible={visible} hideMenu={hideDrawer}/>\n\n            <p>You clicked {count} times</p>\n\n            <Button\n                onClick={() => {\n                    enterLoading();\n                    setCount(count + 1)\n                }}\n                type=\"primary\"\n                loading={loading.isLoading}\n            >Click me</Button>\n\n            {loading.isLoading ? <Countdown value={deadline} format=\"s:SSS\"/> : null}\n\n\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n            <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}